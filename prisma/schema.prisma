generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String         @id @default(uuid())
  email               String         @unique
  password            String
  needsPasswordChange Boolean?       @default(false)
  role                UserRole       @default(user)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @default(now()) @updatedAt

  profile             Profile?
  quizzes             Quiz[]        
  scores              Score[]
}

model Profile {
  id           String    @id @default(uuid())
  userId       String    @unique
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  username     String?   @unique
  firstName    String?
  lastName     String?
  dateOfBirth  DateTime?
  phoneNumber  String?
  address      String?
  bio          String?
  profileImage String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now()) @updatedAt
}

model Quiz {
  id            String    @id @default(uuid())
  title         String
  category      String    
  questions     Question[]
  creator       User       @relation( fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId     String
  scores        Score[]
}

model Question {
  id              String    @id @default(uuid())
  content         String
  options         Answer[]
  correctOptionId Int
  quiz            Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId          String
}

model Answer {
  id         String    @id @default(uuid())
  content    String
  isCorrect  Boolean?  @default(false) 
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
}


model Score {
  id     String    @id @default(uuid())
  score  Int
  user   User   @relation( fields: [userId], references: [id], onDelete: Cascade)
  userId String
  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId String
}

enum UserRole {
  user
  admin
  superAdmin
}
